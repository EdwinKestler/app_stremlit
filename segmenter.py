"""Segmentation helpers using LangSAM and SAM2."""

from __future__ import annotations

import os
from typing import Iterable

import numpy as np
import rasterio
from samgeo import SamGeo
from samgeo.text_sam import LangSAM


def run_langsam(image_path: str, text_prompts: Iterable[str], out_dir: str) -> str:
    """Generate a combined mask for the provided text prompts using LangSAM.

    Parameters
    ----------
    image_path: str
        Path to the input image.
    text_prompts: Iterable[str]
        Collection of text prompts to detect.
    out_dir: str
        Directory to store intermediate and final masks.

    Returns
    -------
    str
        Path to the combined LangSAM mask as a GeoTIFF.
    """
    os.makedirs(out_dir, exist_ok=True)
    lang_sam = LangSAM()

    with rasterio.open(image_path) as src:
        profile = src.profile

    combined = None
    for prompt in text_prompts:
        lang_sam.predict(image=image_path, text_prompt=prompt, box_threshold=0.24, text_threshold=0.24)
        tmp = os.path.join(out_dir, f"langsam_{prompt}.tif")
        lang_sam.show_anns(cmap="Greens", add_boxes=True, alpha=1, blend=False, output=tmp)
        with rasterio.open(tmp) as mask_src:
            mask = mask_src.read(1)
        combined = mask if combined is None else np.logical_or(combined, mask)
        os.remove(tmp)

    mask_path = os.path.join(out_dir, "langsam_mask.tif")
    profile.update(dtype=rasterio.uint8, count=1)
    with rasterio.open(mask_path, "w", **profile) as dst:
        dst.write(combined.astype(rasterio.uint8), 1)
    return mask_path


def run_sam2(image_path: str, out_dir: str, model_dir: str) -> str:
    """Run general segmentation using SAM2 via the ``samgeo`` library.

    This function expects the SAM2 checkpoint to be located inside ``model_dir``.

    Parameters
    ----------
    image_path: str
        Path to the image to segment.
    out_dir: str
        Directory for the generated mask.
    model_dir: str
        Directory containing the ``sam2`` model checkpoint.

    Returns
    -------
    str
        Path to the raster mask generated by SAM2.
    """
    os.makedirs(out_dir, exist_ok=True)
    checkpoint = os.path.join(model_dir, "sam2_hiera_l.pt")
    if not os.path.exists(checkpoint):
        raise FileNotFoundError("SAM2 checkpoint 'sam2_hiera_l.pt' not found in model_dir")

    sam = SamGeo(model_type="sam2_hiera_l", checkpoint=checkpoint)
    mask_path = os.path.join(out_dir, "sam2_mask.tif")
    sam.generate(source=image_path, output=mask_path, batch=True, foreground=True)
    return mask_path
